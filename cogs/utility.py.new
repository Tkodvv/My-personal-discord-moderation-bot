"""
Cat command implementation
"""
@commands.hybrid_command(name="cat", description="Send random cat image(s) (1–5)")
@commands.cooldown(1, 5.0, commands.BucketType.user)
@app_commands.describe(count="How many cats to fetch (1-5)")
async def cat(self, ctx, count: Optional[int] = 1):
    """Send random cat image(s) (1–5)."""
    try:
        # Convert count to int and clamp between 1 and 5
        n = max(1, min(int(count or 1), 5))
    except (ValueError, TypeError):
        n = 1

    # Handle different command types
    if isinstance(ctx, discord.Interaction):
        await ctx.response.defer(thinking=True)
    else:
        try:
            await self.delete_command_message(ctx)
        except Exception as e:
            self.logger.warning(f"Failed to delete command message: {e}")

    # Prepare API request
    api_key = os.getenv("CAT_API_KEY")
    url = "https://api.thecatapi.com/v1/images/search"
    params = {"limit": n, "size": "full"}
    headers = {"x-api-key": api_key} if api_key else {}

    async def send_message(content, ephemeral=False):
        """Helper to send messages based on context type"""
        try:
            if isinstance(ctx, discord.Interaction):
                if not ctx.response.is_done():
                    await ctx.response.send_message(content, ephemeral=ephemeral)
                else:
                    await ctx.followup.send(content, ephemeral=ephemeral)
            else:
                await ctx.send(content, delete_after=5 if ephemeral else None)
        except Exception as e:
            self.logger.error(f"Error sending message: {e}")

    # Fetch cat images
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params, headers=headers, timeout=15) as r:
                if r.status != 200:
                    await send_message("❌ Cat API error. Try again later.", ephemeral=True)
                    return
                data = await r.json()
    except Exception as e:
        self.logger.error(f"Cat API error: {e}")
        await send_message("❌ Couldn't reach the cat server. Try again later.", ephemeral=True)
        return

    if not isinstance(data, list) or not data:
        await send_message("❌ No cats found.", ephemeral=True)
        return

    # Send images
    sent_count = 0
    for item in data[:n]:
        img = item.get("url")
        if img:
            try:
                if sent_count == 0:
                    await send_message(img)
                else:
                    await ctx.channel.send(img)
                sent_count += 1
            except Exception as e:
                self.logger.error(f"Error sending cat image: {e}")
                continue

    if sent_count == 0:
        await send_message("❌ Cat API returned no usable images.", ephemeral=True)
